{
  "meta": {
    "instanceId": "apr-website-lead-crm"
  },
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "new-lead-scoring",
        "options": {
          "noResponseBody": false
        }
      },
      "id": "b8c77a0e-6d0c-4d3a-9d3f-3e3c6c8a1234",
      "name": "Lead Scoring Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [
        340,
        300
      ],
      "webhookId": "lead-scoring-webhook"
    },
    {
      "parameters": {
        "jsCode": "// Lead Scoring Engine - Alpine Peak Roofing\n// Extract and validate incoming lead data\n\nconst inputData = $input.all();\nconst leadData = inputData[0].json;\n\n// Validate required fields\nif (!leadData.email || !leadData.firstName || !leadData.projectType) {\n  throw new Error('Missing required lead data fields');\n}\n\n// Initialize scoring components\nconst scoringData = {\n  leadId: leadData.leadId || `lead_${Date.now()}`,\n  email: leadData.email,\n  firstName: leadData.firstName,\n  lastName: leadData.lastName || '',\n  phone: leadData.phone || '',\n  projectType: leadData.projectType,\n  urgency: leadData.urgency || 'medium',\n  source: leadData.source || 'unknown',\n  \n  // Initialize scoring categories\n  behavioral: {\n    websiteEngagement: leadData.websiteEngagement || {},\n    contentConsumption: leadData.contentConsumption || {},\n    formInteractions: leadData.formInteractions || {}\n  },\n  \n  demographic: {\n    location: leadData.location || {},\n    propertyType: leadData.propertyType || 'residential',\n    budgetIndicators: leadData.budgetIndicators || {}\n  },\n  \n  source: {\n    channel: leadData.source || 'unknown',\n    campaign: leadData.campaign || '',\n    referrer: leadData.referrer || ''\n  },\n  \n  interaction: {\n    responseSpeed: leadData.responseSpeed || 0,\n    communicationQuality: leadData.communicationQuality || 0,\n    timeline: leadData.timeline || 'planning-ahead'\n  }\n};\n\nconsole.log('Lead data prepared for scoring:', scoringData.leadId);\n\nreturn [{ json: scoringData }];"
      },
      "id": "a1b2c3d4-5e6f-7890-abcd-ef1234567890",
      "name": "Parse Lead Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        560,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Behavioral Score Calculation (40% of total score)\n// Based on website engagement, content consumption, and form interactions\n\nconst leadData = $input.all()[0].json;\nlet behavioralScore = 0;\nlet scoreDetails = [];\n\n// Website Engagement Scoring\nconst websiteEngagement = leadData.behavioral.websiteEngagement;\n\n// Pages visited (max 25 points)\nconst pagesVisited = websiteEngagement.pagesVisited || 1;\nconst pagesScore = Math.min(pagesVisited * 5, 25);\nbehavioralScore += pagesScore;\nscoreDetails.push(`Pages visited: ${pagesVisited} = ${pagesScore}pts`);\n\n// Time on site (max 20 points)\nconst timeOnSite = websiteEngagement.timeOnSiteMinutes || 1;\nconst timeScore = Math.min(timeOnSite * 2, 20);\nbehavioralScore += timeScore;\nscoreDetails.push(`Time on site: ${timeOnSite}min = ${timeScore}pts`);\n\n// Return visits (max 30 points)\nconst returnVisits = websiteEngagement.returnVisits || 0;\nconst returnScore = Math.min(returnVisits * 10, 30);\nbehavioralScore += returnScore;\nscoreDetails.push(`Return visits: ${returnVisits} = ${returnScore}pts`);\n\n// Bounce rate consideration (max 15 points)\nconst bounceRate = websiteEngagement.bounceRate || 0.5;\nlet bounceScore = 0;\nif (bounceRate < 0.3) bounceScore = 15;\nelse if (bounceRate < 0.6) bounceScore = 5;\nbehavioralScore += bounceScore;\nscoreDetails.push(`Bounce rate: ${(bounceRate * 100).toFixed(1)}% = ${bounceScore}pts`);\n\n// Content Consumption Scoring\nconst contentConsumption = leadData.behavioral.contentConsumption;\n\n// Downloads (15 points each)\nconst downloads = contentConsumption.downloads || 0;\nconst downloadScore = downloads * 15;\nbehavioralScore += downloadScore;\nscoreDetails.push(`Downloads: ${downloads} = ${downloadScore}pts`);\n\n// Video views (10 points each)\nconst videoViews = contentConsumption.videoViews || 0;\nconst videoScore = videoViews * 10;\nbehavioralScore += videoScore;\nscoreDetails.push(`Video views: ${videoViews} = ${videoScore}pts`);\n\n// Guide reads (12 points each)\nconst guideReads = contentConsumption.guideReads || 0;\nconst guideScore = guideReads * 12;\nbehavioralScore += guideScore;\nscoreDetails.push(`Guide reads: ${guideReads} = ${guideScore}pts`);\n\n// Calculator usage (20 points each)\nconst calculatorUsage = contentConsumption.calculatorUsage || 0;\nconst calculatorScore = calculatorUsage * 20;\nbehavioralScore += calculatorScore;\nscoreDetails.push(`Calculator usage: ${calculatorUsage} = ${calculatorScore}pts`);\n\n// Form Interactions Scoring\nconst formInteractions = leadData.behavioral.formInteractions;\n\n// Form completion rate (max 30 points)\nconst completionRate = formInteractions.completionRate || 1;\nconst completionScore = completionRate * 30;\nbehavioralScore += completionScore;\nscoreDetails.push(`Form completion: ${(completionRate * 100).toFixed(1)}% = ${completionScore}pts`);\n\n// Field focus time (max 10 points)\nconst focusTime = formInteractions.fieldFocusTimeSeconds || 30;\nconst focusScore = Math.min(focusTime / 10, 10);\nbehavioralScore += focusScore;\nscoreDetails.push(`Field focus time: ${focusTime}s = ${focusScore.toFixed(1)}pts`);\n\n// Progressive disclosure (5 points per step)\nconst progressiveSteps = formInteractions.progressiveSteps || 1;\nconst progressiveScore = progressiveSteps * 5;\nbehavioralScore += progressiveScore;\nscoreDetails.push(`Progressive steps: ${progressiveSteps} = ${progressiveScore}pts`);\n\n// Apply 40% weight to behavioral score\nconst weightedBehavioralScore = Math.min(behavioralScore * 0.4, 40);\n\nconst result = {\n  ...leadData,\n  behavioralScore: {\n    rawScore: Math.round(behavioralScore),\n    weightedScore: Math.round(weightedBehavioralScore * 100) / 100,\n    details: scoreDetails,\n    weight: 0.4\n  }\n};\n\nconsole.log(`Behavioral Score - Lead ${leadData.leadId}: ${Math.round(weightedBehavioralScore)} points`);\n\nreturn [{ json: result }];"
      },
      "id": "b2c3d4e5-6f78-9012-bcde-f23456789012",
      "name": "Calculate Behavioral Score",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        780,
        200
      ]
    },
    {
      "parameters": {
        "jsCode": "// Demographic Score Calculation (30% of total score)\n// Based on location, property type, and budget indicators\n\nconst leadData = $input.all()[0].json;\nlet demographicScore = 0;\nlet scoreDetails = [];\n\n// Location Scoring\nconst location = leadData.demographic.location;\n\n// Service area check (30 points if in service area)\nconst inServiceArea = location.inServiceArea !== false; // Default to true if not specified\nconst serviceAreaScore = inServiceArea ? 30 : 0;\ndemographicScore += serviceAreaScore;\nscoreDetails.push(`Service area: ${inServiceArea ? 'Yes' : 'No'} = ${serviceAreaScore}pts`);\n\n// Distance from office (max 25 points)\nconst distanceMiles = location.distanceMiles || 25;\nlet distanceScore = 5; // Default for unknown distance\nif (distanceMiles < 20) distanceScore = 25;\nelse if (distanceMiles < 50) distanceScore = 15;\nelse if (distanceMiles < 100) distanceScore = 5;\nelse distanceScore = 0;\ndemographicScore += distanceScore;\nscoreDetails.push(`Distance: ${distanceMiles}mi = ${distanceScore}pts`);\n\n// Neighborhood value (max 20 points)\nconst neighborhoodPercentile = location.neighborhoodValuePercentile || 50;\nconst neighborhoodScore = Math.round(neighborhoodPercentile * 0.2);\ndemographicScore += neighborhoodScore;\nscoreDetails.push(`Neighborhood value: ${neighborhoodPercentile}th percentile = ${neighborhoodScore}pts`);\n\n// Property Type Scoring\nconst propertyType = leadData.demographic.propertyType || 'residential';\nlet propertyScore = 15; // Default\nswitch (propertyType.toLowerCase()) {\n  case 'commercial':\n    propertyScore = 25;\n    break;\n  case 'multi-family':\n  case 'multi_family':\n    propertyScore = 20;\n    break;\n  case 'residential':\n  default:\n    propertyScore = 15;\n    break;\n}\ndemographicScore += propertyScore;\nscoreDetails.push(`Property type: ${propertyType} = ${propertyScore}pts`);\n\n// Budget Indicators Scoring\nconst budgetIndicators = leadData.demographic.budgetIndicators;\n\n// Project scope scoring\nconst projectType = leadData.projectType;\nlet projectScore = 15; // Default\nswitch (projectType.toLowerCase()) {\n  case 'roof-replacement':\n  case 'roof_replacement':\n  case 'replacement':\n    projectScore = 30;\n    break;\n  case 'emergency':\n  case 'storm-damage':\n  case 'storm_damage':\n    projectScore = 25;\n    break;\n  case 'roof-repair':\n  case 'roof_repair':\n  case 'repair':\n    projectScore = 15;\n    break;\n  case 'inspection':\n    projectScore = 10;\n    break;\n  default:\n    projectScore = 15;\n    break;\n}\ndemographicScore += projectScore;\nscoreDetails.push(`Project type: ${projectType} = ${projectScore}pts`);\n\n// Budget range scoring\nconst budgetRange = budgetIndicators.budgetRange || 'need-estimate';\nlet budgetScore = 15; // Default\nswitch (budgetRange.toLowerCase()) {\n  case '50k-plus':\n  case '50k+':\n    budgetScore = 30;\n    break;\n  case '25k-50k':\n    budgetScore = 25;\n    break;\n  case '10k-25k':\n    budgetScore = 20;\n    break;\n  case 'under-10k':\n    budgetScore = 10;\n    break;\n  case 'need-estimate':\n  default:\n    budgetScore = 15;\n    break;\n}\ndemographicScore += budgetScore;\nscoreDetails.push(`Budget range: ${budgetRange} = ${budgetScore}pts`);\n\n// Urgency scoring\nconst urgency = leadData.urgency || 'planning-ahead';\nlet urgencyScore = 5; // Default\nswitch (urgency.toLowerCase()) {\n  case 'immediate':\n  case 'emergency':\n    urgencyScore = 25;\n    break;\n  case 'within-month':\n  case 'within_month':\n    urgencyScore = 20;\n    break;\n  case 'within-quarter':\n  case 'within_quarter':\n    urgencyScore = 15;\n    break;\n  case 'planning-ahead':\n  case 'planning_ahead':\n  default:\n    urgencyScore = 5;\n    break;\n}\ndemographicScore += urgencyScore;\nscoreDetails.push(`Urgency: ${urgency} = ${urgencyScore}pts`);\n\n// Apply 30% weight to demographic score\nconst weightedDemographicScore = Math.min(demographicScore * 0.3, 30);\n\nconst result = {\n  ...leadData,\n  demographicScore: {\n    rawScore: Math.round(demographicScore),\n    weightedScore: Math.round(weightedDemographicScore * 100) / 100,\n    details: scoreDetails,\n    weight: 0.3\n  }\n};\n\nconsole.log(`Demographic Score - Lead ${leadData.leadId}: ${Math.round(weightedDemographicScore)} points`);\n\nreturn [{ json: result }];"
      },
      "id": "c3d4e5f6-7890-1234-cdef-345678901234",
      "name": "Calculate Demographic Score",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        780,
        400
      ]
    },
    {
      "parameters": {
        "jsCode": "// Source Quality Score Calculation (20% of total score)\n// Based on lead source, campaign quality, and referrer information\n\nconst leadData = $input.all()[0].json;\nlet sourceScore = 0;\nlet scoreDetails = [];\n\n// Source Channel Scoring\nconst sourceChannel = leadData.source.channel || 'unknown';\nlet channelScore = 10; // Default for unknown\n\n// Source quality mapping based on typical conversion rates\nconst sourceQuality = {\n  'referral': 30,\n  'word-of-mouth': 30,\n  'repeat-customer': 30,\n  'google-organic': 25,\n  'google-ads': 22,\n  'bing-ads': 20,\n  'facebook-ads': 18,\n  'instagram': 16,\n  'linkedin': 24,\n  'direct': 20,\n  'email-campaign': 15,\n  'content-download': 18,\n  'chatbot': 20,\n  'roof-estimator': 25,\n  'blog-content': 15,\n  'social-media': 12,\n  'cold-outreach': 8,\n  'unknown': 5\n};\n\nchannelScore = sourceQuality[sourceChannel.toLowerCase()] || 10;\nsourceScore += channelScore;\nscoreDetails.push(`Source channel: ${sourceChannel} = ${channelScore}pts`);\n\n// Campaign Quality Scoring\nconst campaign = leadData.source.campaign || '';\nlet campaignScore = 0;\n\nif (campaign) {\n  // High-performing campaign indicators\n  if (campaign.includes('emergency') || campaign.includes('storm')) {\n    campaignScore = 15;\n  } else if (campaign.includes('free') || campaign.includes('consultation')) {\n    campaignScore = 12;\n  } else if (campaign.includes('guide') || campaign.includes('calculator')) {\n    campaignScore = 10;\n  } else if (campaign.includes('brand') || campaign.includes('alpine-peak')) {\n    campaignScore = 8;\n  } else {\n    campaignScore = 5;\n  }\n} else {\n  campaignScore = 0;\n}\n\nsourceScore += campaignScore;\nscoreDetails.push(`Campaign quality: ${campaign || 'none'} = ${campaignScore}pts`);\n\n// Referrer Analysis Scoring\nconst referrer = leadData.source.referrer || '';\nlet referrerScore = 0;\n\nif (referrer) {\n  if (referrer.includes('google.com')) {\n    referrerScore = 10;\n  } else if (referrer.includes('bing.com') || referrer.includes('yahoo.com')) {\n    referrerScore = 8;\n  } else if (referrer.includes('facebook.com') || referrer.includes('instagram.com')) {\n    referrerScore = 6;\n  } else if (referrer.includes('linkedin.com')) {\n    referrerScore = 8;\n  } else if (referrer.includes('.gov') || referrer.includes('.edu')) {\n    referrerScore = 12;\n  } else {\n    referrerScore = 4;\n  }\n} else {\n  referrerScore = 0; // Direct traffic, already scored in channel\n}\n\nsourceScore += referrerScore;\nscoreDetails.push(`Referrer quality: ${referrer || 'direct'} = ${referrerScore}pts`);\n\n// Time-based Source Quality (weekend vs weekday, business hours)\nconst timestamp = new Date();\nconst dayOfWeek = timestamp.getDay();\nconst hourOfDay = timestamp.getHours();\n\nlet timeScore = 0;\n// Business hours (8 AM - 6 PM, Monday-Friday) get higher scores\nif (dayOfWeek >= 1 && dayOfWeek <= 5) {\n  if (hourOfDay >= 8 && hourOfDay <= 18) {\n    timeScore = 8; // Business hours\n  } else {\n    timeScore = 5; // After hours weekday\n  }\n} else {\n  timeScore = 3; // Weekend\n}\n\nsourceScore += timeScore;\nscoreDetails.push(`Timing: ${dayOfWeek === 0 || dayOfWeek === 6 ? 'Weekend' : 'Weekday'} ${hourOfDay}:00 = ${timeScore}pts`);\n\n// UTM Parameter Quality (if available)\nconst utmSource = leadData.source.utm_source || '';\nconst utmMedium = leadData.source.utm_medium || '';\nconst utmCampaign = leadData.source.utm_campaign || '';\n\nlet utmScore = 0;\nif (utmSource || utmMedium || utmCampaign) {\n  utmScore = 5; // Bonus for proper tracking\n}\n\nsourceScore += utmScore;\nif (utmScore > 0) {\n  scoreDetails.push(`UTM tracking: Present = ${utmScore}pts`);\n}\n\n// Apply 20% weight to source score\nconst weightedSourceScore = Math.min(sourceScore * 0.2, 20);\n\nconst result = {\n  ...leadData,\n  sourceQualityScore: {\n    rawScore: Math.round(sourceScore),\n    weightedScore: Math.round(weightedSourceScore * 100) / 100,\n    details: scoreDetails,\n    weight: 0.2\n  }\n};\n\nconsole.log(`Source Quality Score - Lead ${leadData.leadId}: ${Math.round(weightedSourceScore)} points`);\n\nreturn [{ json: result }];"
      },
      "id": "d4e5f6g7-8901-2345-defg-456789012345",
      "name": "Calculate Source Quality Score",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        780,
        600
      ]
    },
    {
      "parameters": {
        "jsCode": "// Interaction Score Calculation (10% of total score)\n// Based on response quality, communication preferences, and engagement level\n\nconst leadData = $input.all()[0].json;\nlet interactionScore = 0;\nlet scoreDetails = [];\n\n// Response Speed/Quality Scoring\nconst responseSpeed = leadData.interaction.responseSpeed || 0; // minutes to respond\nlet responseScore = 0;\n\nif (responseSpeed > 0) {\n  if (responseSpeed <= 5) {\n    responseScore = 25; // Very fast response\n  } else if (responseSpeed <= 15) {\n    responseScore = 20; // Fast response\n  } else if (responseSpeed <= 60) {\n    responseScore = 15; // Moderate response\n  } else if (responseSpeed <= 240) {\n    responseScore = 10; // Slow response\n  } else {\n    responseScore = 5; // Very slow response\n  }\n} else {\n  responseScore = 0; // No response yet\n}\n\ninteractionScore += responseScore;\nscoreDetails.push(`Response speed: ${responseSpeed > 0 ? responseSpeed + ' minutes' : 'Not yet'} = ${responseScore}pts`);\n\n// Communication Quality Scoring\nconst communicationQuality = leadData.interaction.communicationQuality || 0;\nlet qualityScore = 0;\n\n// Communication quality indicators (0-10 scale)\nif (communicationQuality >= 8) {\n  qualityScore = 20; // Detailed, specific questions\n} else if (communicationQuality >= 6) {\n  qualityScore = 15; // Good quality responses\n} else if (communicationQuality >= 4) {\n  qualityScore = 10; // Basic communication\n} else if (communicationQuality >= 2) {\n  qualityScore = 5; // Poor quality\n} else {\n  qualityScore = 0; // Very poor or no communication\n}\n\ninteractionScore += qualityScore;\nscoreDetails.push(`Communication quality: ${communicationQuality}/10 = ${qualityScore}pts`);\n\n// Contact Preference Scoring (phone preference indicates higher intent)\nconst contactPreference = leadData.preferredContact || 'email';\nlet preferenceScore = 5; // Default\n\nswitch (contactPreference.toLowerCase()) {\n  case 'phone':\n  case 'call':\n    preferenceScore = 20;\n    break;\n  case 'text':\n  case 'sms':\n    preferenceScore = 15;\n    break;\n  case 'email':\n    preferenceScore = 10;\n    break;\n  case 'no-preference':\n  case 'any':\n    preferenceScore = 12;\n    break;\n  default:\n    preferenceScore = 5;\n    break;\n}\n\ninteractionScore += preferenceScore;\nscoreDetails.push(`Contact preference: ${contactPreference} = ${preferenceScore}pts`);\n\n// Timeline Urgency Scoring\nconst timeline = leadData.interaction.timeline || 'planning-ahead';\nlet timelineScore = 5; // Default\n\nswitch (timeline.toLowerCase()) {\n  case 'immediate':\n  case 'emergency':\n  case 'asap':\n    timelineScore = 25;\n    break;\n  case 'within-week':\n  case 'within_week':\n    timelineScore = 20;\n    break;\n  case 'within-month':\n  case 'within_month':\n    timelineScore = 15;\n    break;\n  case 'within-quarter':\n  case 'within_quarter':\n    timelineScore = 10;\n    break;\n  case 'planning-ahead':\n  case 'planning_ahead':\n  case 'future':\n    timelineScore = 5;\n    break;\n  default:\n    timelineScore = 5;\n    break;\n}\n\ninteractionScore += timelineScore;\nscoreDetails.push(`Timeline urgency: ${timeline} = ${timelineScore}pts`);\n\n// Decision Maker Identification\nconst decisionMaker = leadData.decisionMaker !== false; // Assume true if not specified\nconst decisionScore = decisionMaker ? 15 : 5;\ninteractionScore += decisionScore;\nscoreDetails.push(`Decision maker: ${decisionMaker ? 'Yes' : 'No/Unknown'} = ${decisionScore}pts`);\n\n// Previous Experience with Contractors\nconst previousExperience = leadData.previousContractorExperience || 'unknown';\nlet experienceScore = 5; // Default\n\nswitch (previousExperience.toLowerCase()) {\n  case 'positive':\n  case 'good':\n    experienceScore = 15;\n    break;\n  case 'mixed':\n  case 'average':\n    experienceScore = 10;\n    break;\n  case 'negative':\n  case 'bad':\n    experienceScore = 20; // May be motivated for better experience\n    break;\n  case 'none':\n  case 'first-time':\n    experienceScore = 12;\n    break;\n  case 'unknown':\n  default:\n    experienceScore = 5;\n    break;\n}\n\ninteractionScore += experienceScore;\nscoreDetails.push(`Previous experience: ${previousExperience} = ${experienceScore}pts`);\n\n// Apply 10% weight to interaction score\nconst weightedInteractionScore = Math.min(interactionScore * 0.1, 10);\n\nconst result = {\n  ...leadData,\n  interactionScore: {\n    rawScore: Math.round(interactionScore),\n    weightedScore: Math.round(weightedInteractionScore * 100) / 100,\n    details: scoreDetails,\n    weight: 0.1\n  }\n};\n\nconsole.log(`Interaction Score - Lead ${leadData.leadId}: ${Math.round(weightedInteractionScore)} points`);\n\nreturn [{ json: result }];"
      },
      "id": "e5f6g7h8-9012-3456-fghi-567890123456",
      "name": "Calculate Interaction Score",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        780,
        800
      ]
    },
    {
      "parameters": {
        "jsCode": "// Final Score Calculation and Priority Assignment\n// Combine all weighted scores and determine lead priority\n\nconst leadData = $input.all()[0].json;\n\n// Extract weighted scores\nconst behavioralScore = leadData.behavioralScore.weightedScore || 0;\nconst demographicScore = leadData.demographicScore.weightedScore || 0;\nconst sourceScore = leadData.sourceQualityScore.weightedScore || 0;\nconst interactionScore = leadData.interactionScore.weightedScore || 0;\n\n// Calculate final score (sum of all weighted scores)\nconst finalScore = behavioralScore + demographicScore + sourceScore + interactionScore;\n\n// Determine priority level based on final score\nlet priorityLevel = 'unqualified';\nlet priorityColor = '#dc2626'; // Red\nlet priorityDescription = 'Low quality lead requiring nurturing';\n\nif (finalScore >= 80) {\n  priorityLevel = 'hot';\n  priorityColor = '#dc2626'; // Red\n  priorityDescription = 'High-priority lead requiring immediate contact';\n} else if (finalScore >= 60) {\n  priorityLevel = 'warm';\n  priorityColor = '#f59e0b'; // Orange\n  priorityDescription = 'Qualified lead with good potential';\n} else if (finalScore >= 40) {\n  priorityLevel = 'cold';\n  priorityColor = '#3b82f6'; // Blue\n  priorityDescription = 'Lead requiring nurturing and follow-up';\n} else {\n  priorityLevel = 'unqualified';\n  priorityColor = '#6b7280'; // Gray\n  priorityDescription = 'Lead requiring qualification and nurturing';\n}\n\n// Determine recommended actions based on score and priority\nconst recommendedActions = [];\n\nif (finalScore >= 80) {\n  recommendedActions.push('Call within 15 minutes');\n  recommendedActions.push('Send immediate SMS notification');\n  recommendedActions.push('Schedule appointment ASAP');\n  recommendedActions.push('Assign to senior estimator');\n} else if (finalScore >= 60) {\n  recommendedActions.push('Call within 2 hours');\n  recommendedActions.push('Send personalized email sequence');\n  recommendedActions.push('Offer free consultation');\n  recommendedActions.push('Assign to experienced team member');\n} else if (finalScore >= 40) {\n  recommendedActions.push('Call within 24 hours');\n  recommendedActions.push('Add to nurturing email sequence');\n  recommendedActions.push('Provide educational content');\n  recommendedActions.push('Schedule follow-up in 1 week');\n} else {\n  recommendedActions.push('Add to long-term nurturing sequence');\n  recommendedActions.push('Provide valuable content');\n  recommendedActions.push('Re-qualify after engagement');\n  recommendedActions.push('Monitor for improved scoring signals');\n}\n\n// Create comprehensive scoring breakdown\nconst scoringBreakdown = {\n  finalScore: Math.round(finalScore * 100) / 100,\n  maxPossibleScore: 100,\n  scorePercentage: Math.round((finalScore / 100) * 100),\n  priorityLevel,\n  priorityColor,\n  priorityDescription,\n  recommendedActions,\n  \n  componentScores: {\n    behavioral: {\n      score: behavioralScore,\n      percentage: Math.round((behavioralScore / 40) * 100),\n      weight: '40%',\n      details: leadData.behavioralScore.details\n    },\n    demographic: {\n      score: demographicScore,\n      percentage: Math.round((demographicScore / 30) * 100),\n      weight: '30%',\n      details: leadData.demographicScore.details\n    },\n    sourceQuality: {\n      score: sourceScore,\n      percentage: Math.round((sourceScore / 20) * 100),\n      weight: '20%',\n      details: leadData.sourceQualityScore.details\n    },\n    interaction: {\n      score: interactionScore,\n      percentage: Math.round((interactionScore / 10) * 100),\n      weight: '10%',\n      details: leadData.interactionScore.details\n    }\n  },\n  \n  scoringTimestamp: new Date().toISOString(),\n  scoringVersion: '1.0'\n};\n\n// Build final result\nconst result = {\n  leadId: leadData.leadId,\n  email: leadData.email,\n  firstName: leadData.firstName,\n  lastName: leadData.lastName,\n  phone: leadData.phone,\n  projectType: leadData.projectType,\n  urgency: leadData.urgency,\n  source: leadData.source,\n  \n  // Lead scoring results\n  leadScore: finalScore,\n  priorityLevel,\n  priorityColor,\n  priorityDescription,\n  recommendedActions,\n  scoringBreakdown,\n  \n  // Metadata\n  scoredAt: new Date().toISOString(),\n  scoringEngine: 'alpine-peak-v1.0'\n};\n\nconsole.log(`Final Score - Lead ${leadData.leadId}: ${Math.round(finalScore)} points (${priorityLevel})`);\nconsole.log(`Recommended actions: ${recommendedActions.join(', ')}`);\n\nreturn [{ json: result }];"
      },
      "id": "f6g7h8i9-0123-4567-ghij-678901234567",
      "name": "Calculate Final Score & Priority",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1000,
        500
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "PUT",
        "url": "={{ $node[\"Parse Lead Data\"].json[\"api_base_url\"] }}/api/leads/{{ $node[\"Parse Lead Data\"].json[\"leadId\"] }}/score",
        "options": {
          "bodyContentType": "json",
          "timeout": 10000\n        },\n        \"body\": {\n          \"leadScore\": \"={{ $node[\"Calculate Final Score & Priority\"].json[\"leadScore\"] }}\",\n          \"priorityLevel\": \"={{ $node[\"Calculate Final Score & Priority\"].json[\"priorityLevel\"] }}\",\n          \"priorityDescription\": \"={{ $node[\"Calculate Final Score & Priority\"].json[\"priorityDescription\"] }}\",\n          \"recommendedActions\": \"={{ $node[\"Calculate Final Score & Priority\"].json[\"recommendedActions\"] }}\",\n          \"scoringBreakdown\": \"={{ $node[\"Calculate Final Score & Priority\"].json[\"scoringBreakdown\"] }}\",\n          \"scoredAt\": \"={{ $node[\"Calculate Final Score & Priority\"].json[\"scoredAt\"] }}\"\n        }\n      },\n      \"id\": \"g7h8i9j0-1234-5678-hijk-789012345678\",\n      \"name\": \"Update Lead Record\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"typeVersion\": 4.2,\n      \"position\": [\n        1220,\n        400\n      ]\n    },\n    {\n      \"parameters\": {\n        \"requestMethod\": \"POST\",\n        \"url\": \"={{ $node[\"Parse Lead Data\"].json[\"webhook_base_url\"] }}/webhook/lead-scored\",\n        \"options\": {\n          \"bodyContentType\": \"json\",\n          \"timeout\": 5000\n        },\n        \"body\": {\n          \"leadId\": \"={{ $node[\"Calculate Final Score & Priority\"].json[\"leadId\"] }}\",\n          \"leadScore\": \"={{ $node[\"Calculate Final Score & Priority\"].json[\"leadScore\"] }}\",\n          \"priorityLevel\": \"={{ $node[\"Calculate Final Score & Priority\"].json[\"priorityLevel\"] }}\",\n          \"recommendedActions\": \"={{ $node[\"Calculate Final Score & Priority\"].json[\"recommendedActions\"] }}\",\n          \"leadData\": \"={{ $node[\"Calculate Final Score & Priority\"].json }}\"\n        }\n      },\n      \"id\": \"h8i9j0k1-2345-6789-ijkl-890123456789\",\n      \"name\": \"Trigger Lead Routing\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"typeVersion\": 4.2,\n      \"position\": [\n        1220,\n        600\n      ]\n    },\n    {\n      \"parameters\": {\n        \"conditions\": {\n          \"options\": {\n            \"caseSensitive\": true,\n            \"leftValue\": \"\",\n            \"typeValidation\": \"strict\"\n          },\n          \"conditions\": [\n            {\n              \"leftValue\": \"={{ $node[\"Calculate Final Score & Priority\"].json[\"priorityLevel\"] }}\",\n              \"rightValue\": \"hot\",\n              \"operator\": {\n                \"type\": \"string\",\n                \"operation\": \"equals\",\n                \"rightType\": \"any\"\n              }\n            }\n          ],\n          \"combinator\": \"and\"\n        }\n      },\n      \"id\": \"i9j0k1l2-3456-789a-jklm-901234567890\",\n      \"name\": \"Check If Hot Lead\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"typeVersion\": 2,\n      \"position\": [\n        1440,\n        500\n      ]\n    },\n    {\n      \"parameters\": {\n        \"requestMethod\": \"POST\",\n        \"url\": \"={{ $node[\"Parse Lead Data\"].json[\"notification_base_url\"] }}/api/notifications/hot-lead-alert\",\n        \"options\": {\n          \"bodyContentType\": \"json\"\n        },\n        \"body\": {\n          \"leadId\": \"={{ $node[\"Calculate Final Score & Priority\"].json[\"leadId\"] }}\",\n          \"leadName\": \"={{ $node[\"Calculate Final Score & Priority\"].json[\"firstName\"] }} {{ $node[\"Calculate Final Score & Priority\"].json[\"lastName\"] }}\",\n          \"leadScore\": \"={{ $node[\"Calculate Final Score & Priority\"].json[\"leadScore\"] }}\",\n          \"projectType\": \"={{ $node[\"Calculate Final Score & Priority\"].json[\"projectType\"] }}\",\n          \"phone\": \"={{ $node[\"Calculate Final Score & Priority\"].json[\"phone\"] }}\",\n          \"email\": \"={{ $node[\"Calculate Final Score & Priority\"].json[\"email\"] }}\",\n          \"urgency\": \"HOT LEAD - Immediate Action Required\",\n          \"notificationChannels\": [\n            \"email\",\n            \"sms\",\n            \"slack\"\n          ]\n        }\n      },\n      \"id\": \"j0k1l2m3-4567-89ab-klmn-012345678901\",\n      \"name\": \"Send Hot Lead Alert\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"typeVersion\": 4.2,\n      \"position\": [\n        1660,\n        400\n      ]\n    },\n    {\n      \"parameters\": {\n        \"requestMethod\": \"POST\",\n        \"url\": \"={{ $node[\"Parse Lead Data\"].json[\"analytics_base_url\"] }}/api/analytics/lead-scoring\",\n        \"options\": {\n          \"bodyContentType\": \"json\"\n        },\n        \"body\": {\n          \"event\": \"lead_scored\",\n          \"leadId\": \"={{ $node[\"Calculate Final Score & Priority\"].json[\"leadId\"] }}\",\n          \"score\": \"={{ $node[\"Calculate Final Score & Priority\"].json[\"leadScore\"] }}\",\n          \"priority\": \"={{ $node[\"Calculate Final Score & Priority\"].json[\"priorityLevel\"] }}\",\n          \"source\": \"={{ $node[\"Calculate Final Score & Priority\"].json[\"source\"] }}\",\n          \"timestamp\": \"={{ $node[\"Calculate Final Score & Priority\"].json[\"scoredAt\"] }}\",\n          \"scoringBreakdown\": \"={{ $node[\"Calculate Final Score & Priority\"].json[\"scoringBreakdown\"] }}\"\n        }\n      },\n      \"id\": \"k1l2m3n4-5678-9abc-lmno-123456789012\",\n      \"name\": \"Log Analytics Event\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"typeVersion\": 4.2,\n      \"position\": [\n        1440,\n        700\n      ]\n    }\n  ],\n  \"connections\": {\n    \"Lead Scoring Webhook\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Parse Lead Data\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Parse Lead Data\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Calculate Behavioral Score\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Calculate Demographic Score\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Calculate Source Quality Score\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Calculate Interaction Score\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Calculate Behavioral Score\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Calculate Final Score & Priority\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Calculate Demographic Score\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Calculate Final Score & Priority\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Calculate Source Quality Score\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Calculate Final Score & Priority\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Calculate Interaction Score\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Calculate Final Score & Priority\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Calculate Final Score & Priority\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Update Lead Record\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Trigger Lead Routing\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Check If Hot Lead\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Log Analytics Event\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Check If Hot Lead\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Send Hot Lead Alert\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  },\n  \"pinData\": {},\n  \"settings\": {\n    \"executionOrder\": \"v1\"\n  },\n  \"staticData\": null,\n  \"tags\": [\n    {\n      \"createdAt\": \"2025-09-07T21:00:00.000Z\",\n      \"updatedAt\": \"2025-09-07T21:00:00.000Z\",\n      \"id\": \"lead-scoring\",\n      \"name\": \"Lead Scoring\"\n    },\n    {\n      \"createdAt\": \"2025-09-07T21:00:00.000Z\",\n      \"updatedAt\": \"2025-09-07T21:00:00.000Z\",\n      \"id\": \"crm-automation\",\n      \"name\": \"CRM Automation\"\n    }\n  ],\n  \"triggerCount\": 1,\n  \"updatedAt\": \"2025-09-07T21:00:00.000Z\",\n  \"versionId\": \"alpine-peak-lead-scoring-v1.0\"\n}