{
  "name": "chatbot-processing-workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "chatbot-process",
        "options": {}
      },
      "id": "39fad774-c978-4056-a16b-052cb14cae11",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "webhookId": "alpine-peak-chatbot"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "id": "16420381-a6df-4eef-99c0-a4554dd3b05b",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1232,
        0
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.3,
      "position": [
        -16,
        272
      ],
      "id": "781735cf-96b5-42cc-a8a0-4da8536db389",
      "name": "When chat message received",
      "webhookId": "8802ac65-17ad-4fbf-ab52-f770d461e056"
    },
    {
      "parameters": {
        "jsCode": "// Extract and validate chat message data\nfor (const item of $input.all()) {\n  const inputData = item.json;\n  \n  // Validate required fields\n  if (!inputData.message) {\n    throw new Error('Message is required');\n  }\n  \n  // Extract context and user data\n  const chatData = {\n    message: inputData.message,\n    session_id: inputData.session_id || `session_${Date.now()}`,\n    page_context: inputData.page_context || 'website',\n    user_data: inputData.user_data || {},\n    timestamp: new Date().toISOString(),\n    ip_address: 'unknown'\n  };\n  \n  // Determine message intent\n  const message = inputData.message.toLowerCase();\n  let intent = 'general';\n  let priority = 'normal';\n  \n  // Intent classification\n  if (message.includes('estimate') || message.includes('quote') || message.includes('price')) {\n    intent = 'estimation_request';\n    priority = 'high';\n  } else if (message.includes('emergency') || message.includes('urgent') || message.includes('leak')) {\n    intent = 'emergency';\n    priority = 'urgent';\n  } else if (message.includes('schedule') || message.includes('appointment') || message.includes('inspection')) {\n    intent = 'scheduling';\n    priority = 'high';\n  } else if (message.includes('material') || message.includes('shingle') || message.includes('warranty')) {\n    intent = 'product_inquiry';\n    priority = 'normal';\n  } else if (message.includes('contact') || message.includes('phone') || message.includes('email')) {\n    intent = 'contact_info';\n    priority = 'normal';\n  }\n  \n  // Add classification to data\n  chatData.intent = intent;\n  chatData.priority = priority;\n  \n  return { json: chatData };\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        240,
        0
      ],
      "id": "20d5bb13-1349-4be7-9c7c-cf377374babb",
      "name": "Message Processing"
    },
    {
      "parameters": {
        "jsCode": "// Simple response formatting\nfor (const item of $input.all()) {\n  const data = item.json;\n  \n  let responseMessage = 'Thank you for your message. We will get back to you soon.';\n  \n  // Try to get AI response\n  if (data.choices && data.choices[0] && data.choices[0].message) {\n    responseMessage = data.choices[0].message.content;\n  } else if (data.message) {\n    responseMessage = data.message;\n  }\n  \n  const result = {\n    success: true,\n    message: responseMessage,\n    timestamp: new Date().toISOString()\n  };\n  \n  return { json: result };\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        928,
        0
      ],
      "id": "826cb12c-54ea-4102-ac66-8578893da6fd",
      "name": "Format Response"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        544,
        0
      ],
      "id": "ef5bb80f-f4ce-4d85-9465-5c64fa07d301",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        416,
        208
      ],
      "id": "60cf24d8-1d43-4d6a-9098-b202bbef1853",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "od3qrZGbVE2RSz7J",
          "name": "OpenAi APS account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Message Processing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        []
      ]
    },
    "Message Processing": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Response": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Format Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "a31da9f5-f975-45fa-b28d-764a0e6e75ba",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "62eb072701814b1a1a9c022b7a751c5f8dac0a37a5a414c436048bc8706d2f6f"
  },
  "id": "Shl9c814VtIiKKKi",
  "tags": []
}