{
  "name": "estimate-calculator",
  "active": false,
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "calculate-estimate",
        "options": {}
      },
      "name": "Calculate Estimate Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "calculate-estimate-webhook",
      "id": "webhook-calculate-estimate"
    },
    {
      "parameters": {
        "functionCode": "// Validate incoming estimate request data\nconst requestData = items[0].json;\n\n// Required fields validation\nif (!requestData.measurementId) {\n  throw new Error('Measurement ID is required');\n}\n\nif (!requestData.selectedMaterial) {\n  throw new Error('Selected material is required');\n}\n\nif (!requestData.contactInfo || !requestData.contactInfo.email) {\n  throw new Error('Contact information with email is required');\n}\n\n// Extract and validate measurement data\nif (!requestData.measurements || !requestData.measurements.roofAreaSqFt) {\n  throw new Error('Valid roof measurements are required');\n}\n\n// Set defaults for optional fields\nconst validatedRequest = {\n  measurementId: requestData.measurementId,\n  selectedMaterial: requestData.selectedMaterial,\n  measurements: requestData.measurements,\n  contactInfo: requestData.contactInfo,\n  region: requestData.region || 'Colorado',\n  municipality: requestData.municipality || 'Denver',\n  urgency: requestData.urgency || 'planning',\n  validatedAt: new Date().toISOString()\n};\n\nreturn [{ json: validatedRequest }];"
      },
      "name": "Validate Request Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [460, 300],
      "id": "validate-request"
    },
    {
      "parameters": {
        "operation": "select",
        "table": "material_pricing",
        "where": {
          "conditions": [\n            {\n              \"column\": \"material_id\",\n              \"operator\": \"=\",\n              \"value\": \"={{$json.selectedMaterial}}\"\n            },\n            {\n              \"column\": \"active\",\n              \"operator\": \"=\",\n              \"value\": true\n            }\n          ]\n        }\n      },\n      "name": "Get Material Pricing",\n      "type": "n8n-nodes-base.supabase",\n      "typeVersion": 1,\n      "position": [680, 300],\n      "credentials": {\n        "supabaseApi": {\n          "id": "supabase-credentials",\n          "name": "Alpine Peak Supabase"\n        }\n      },\n      "id": "get-material-pricing"
    },
    {
      "parameters": {
        "operation": "select",
        "table": "regional_rates",\n        "where": {\n          "conditions": [\n            {\n              \"column\": \"state\",\n              \"operator\": \"=\",\n              \"value\": \"={{$json.region}}\"\n            },\n            {\n              \"column\": \"active\",\n              \"operator\": \"=\",\n              \"value\": true\n            }\n          ]\n        }\n      },\n      "name": "Get Regional Rates",\n      "type": "n8n-nodes-base.supabase",\n      "typeVersion": 1,\n      "position": [680, 450],\n      "credentials": {\n        "supabaseApi": {\n          "id": "supabase-credentials",\n          "name": "Alpine Peak Supabase"\n        }\n      },\n      "id": "get-regional-rates"
    },\n    {\n      "parameters": {\n        "functionCode": "// Calculate detailed roof estimate with material and labor costs\nconst requestData = items[0].json;\nconst materialPricing = items[1].json[0]; // First material pricing result\nconst regionalRates = items[2].json[0]; // First regional rates result\n\nif (!materialPricing) {\n  throw new Error('Material pricing not found for selected material');\n}\n\nif (!regionalRates) {\n  throw new Error('Regional rates not found for specified region');\n}\n\nconst measurements = requestData.measurements;\nconst roofArea = measurements.roofAreaSqFt;\nconst features = measurements.features;\nconst slope = measurements.slope;\n\n// Calculate material costs\nconst materialCosts = {\n  // Primary roofing material\n  primary: 0,\n  // Underlayment (required for all roofs)\n  underlayment: roofArea * 0.45, // $0.45 per sqft synthetic underlayment\n  // Flashing and trim materials  \n  flashing: (features.ridgeLengthFt + features.valleyLengthFt + features.rakeLengthFt) * 3.25,\n  // Ridge ventilation\n  ridgeVent: features.ridgeLengthFt * 2.75,\n  // Accessories (gutters, drip edge, etc.)\n  accessories: features.eaveLength * 4.50,\n  total: 0\n};\n\n// Calculate primary material cost with waste factor and complexity\nconst wasteAdjustedArea = roofArea * (1 + (materialPricing.waste_factor || 0.10));\nconst complexityAdjustedArea = wasteAdjustedArea * features.complexityMultiplier;\nmaterialCosts.primary = complexityAdjustedArea * materialPricing.price_per_sqft;\n\n// Total material costs\nmaterialCosts.total = materialCosts.primary + materialCosts.underlayment + \n                     materialCosts.flashing + materialCosts.ridgeVent + materialCosts.accessories;\n\n// Calculate labor costs with regional and complexity adjustments\nlet laborMultiplier = materialPricing.labor_multiplier || 1.0;\n\n// Adjust for roof slope difficulty\nswitch (slope.category) {\n  case 'low':\n    laborMultiplier *= 1.1; // Low slope requires special handling\n    break;\n  case 'steep':\n    laborMultiplier *= 1.3; // Steep roofs are more dangerous/difficult\n    break;\n  default:\n    laborMultiplier *= 1.0;\n}\n\n// Adjust for complexity\nlaborMultiplier *= features.complexityMultiplier;\n\n// Apply municipal adjustment if available\nconst municipalAdjustments = {\n  'Denver': 1.15,\n  'Boulder': 1.25,\n  'Fort Collins': 1.10,\n  'Colorado Springs': 1.05,\n  'Aurora': 1.12,\n  'Westminster': 1.18\n};\n\nconst municipalMultiplier = municipalAdjustments[requestData.municipality] || 1.0;\n\nconst laborCosts = {\n  installation: roofArea * regionalRates.base_labor_rate * laborMultiplier * municipalMultiplier,\n  tearOff: roofArea * regionalRates.tear_off_rate * municipalMultiplier,\n  disposal: roofArea * regionalRates.disposal_rate,\n  permits: regionalRates.permit_fee,\n  total: 0\n};\n\nlaborCosts.total = laborCosts.installation + laborCosts.tearOff + laborCosts.disposal + laborCosts.permits;\n\n// Additional costs\nconst additionalCosts = {\n  inspection: 150, // Standard inspection fee\n  cleanup: roofArea * 0.25, // Cleanup cost per sqft\n  contingency: (materialCosts.total + laborCosts.total) * 0.05, // 5% contingency\n  total: 0\n};\n\nadditionalCosts.total = additionalCosts.inspection + additionalCosts.cleanup + additionalCosts.contingency;\n\n// Calculate totals\nconst subtotal = materialCosts.total + laborCosts.total + additionalCosts.total;\nconst salesTax = subtotal * (regionalRates.sales_tax || 0.029); // Colorado default 2.9%\nconst totalCost = subtotal + salesTax;\n\n// Urgency adjustments\nlet urgencyMultiplier = 1.0;\nif (requestData.urgency === 'urgent') urgencyMultiplier = 1.15; // 15% premium for urgent jobs\nelse if (requestData.urgency === 'soon') urgencyMultiplier = 1.05; // 5% premium for soon jobs\n\nconst finalTotal = totalCost * urgencyMultiplier;\n\n// Create detailed estimate breakdown\nconst estimate = {\n  estimateId: `EST-${Date.now()}`,\n  measurementId: requestData.measurementId,\n  \n  // Property details\n  roofArea: roofArea,\n  selectedMaterial: {\n    id: requestData.selectedMaterial,\n    name: materialPricing.name,\n    category: materialPricing.category,\n    warranty: materialPricing.warranty\n  },\n  \n  // Cost breakdown\n  materialCosts: {\n    primary: Math.round(materialCosts.primary),\n    underlayment: Math.round(materialCosts.underlayment),\n    flashing: Math.round(materialCosts.flashing),\n    ridgeVent: Math.round(materialCosts.ridgeVent),\n    accessories: Math.round(materialCosts.accessories),\n    total: Math.round(materialCosts.total)\n  },\n  \n  laborCosts: {\n    installation: Math.round(laborCosts.installation),\n    tearOff: Math.round(laborCosts.tearOff),\n    disposal: Math.round(laborCosts.disposal),\n    permits: Math.round(laborCosts.permits),\n    total: Math.round(laborCosts.total)\n  },\n  \n  additionalCosts: {\n    inspection: additionalCosts.inspection,\n    cleanup: Math.round(additionalCosts.cleanup),\n    contingency: Math.round(additionalCosts.contingency),\n    total: Math.round(additionalCosts.total)\n  },\n  \n  // Summary\n  subtotal: Math.round(subtotal),\n  salesTax: Math.round(salesTax),\n  urgencyAdjustment: Math.round((finalTotal - totalCost)),\n  totalCost: Math.round(finalTotal),\n  costPerSqft: Math.round((finalTotal / roofArea) * 100) / 100,\n  \n  // Metadata\n  region: requestData.region,\n  municipality: requestData.municipality,\n  urgency: requestData.urgency,\n  laborMultiplier: Math.round(laborMultiplier * 100) / 100,\n  municipalMultiplier: municipalMultiplier,\n  \n  // Customer info\n  contactInfo: requestData.contactInfo,\n  \n  // Validity\n  validUntil: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(), // 30 days\n  createdAt: new Date().toISOString()\n};\n\nreturn [{ json: estimate }];"
      },\n      "name": "Calculate Detailed Estimate",\n      "type": "n8n-nodes-base.function",\n      "typeVersion": 1,\n      "position": [900, 300],\n      "id": "calculate-estimate"\n    },\n    {\n      "parameters": {\n        "functionCode": "// Validate estimate calculations and add quality controls\nconst estimate = items[0].json;\nconst validation = {\n  ...estimate,\n  validation: {\n    isValid: true,\n    warnings: [],\n    errors: [],\n    qualityScore: 1.0\n  }\n};\n\n// Check cost per sqft is reasonable\nif (estimate.costPerSqft < 4.00) {\n  validation.validation.warnings.push('Estimate seems low - may not include all necessary components');\n  validation.validation.qualityScore *= 0.8;\n}\n\nif (estimate.costPerSqft > 25.00) {\n  validation.validation.warnings.push('High-end estimate - customer may want multiple quotes');\n  validation.validation.qualityScore *= 0.9;\n}\n\n// Validate material cost ratios\nconst materialRatio = estimate.materialCosts.total / estimate.totalCost;\nif (materialRatio < 0.3 || materialRatio > 0.7) {\n  validation.validation.warnings.push('Unusual material to labor ratio - verify calculations');\n  validation.validation.qualityScore *= 0.85;\n}\n\n// Check for extremely large or small projects\nif (estimate.roofArea > 6000) {\n  validation.validation.warnings.push('Large commercial-size roof - consider professional site visit');\n}\n\nif (estimate.roofArea < 800) {\n  validation.validation.warnings.push('Small roof area - minimum project charges may apply');\n}\n\n// Validate total cost is reasonable\nif (estimate.totalCost > 50000) {\n  validation.validation.warnings.push('High-value project - recommend additional review and site visit');\n}\n\n// Final quality score\nvalidation.validation.qualityScore = Math.round(validation.validation.qualityScore * 100) / 100;\n\nreturn [{ json: validation }];"
      },\n      "name": "Validate Estimate",\n      "type": "n8n-nodes-base.function",\n      "typeVersion": 1,\n      "position": [1120, 300],\n      "id": "validate-estimate"\n    },\n    {\n      "parameters": {\n        "operation": "insert",\n        "table": "roof_estimates",\n        "columns": {\n          "columnToMatchOn": "id",\n          "columnsUi": {\n            "column": [\n              {\n                "column": "estimate_id",\n                "value": "={{$json.estimateId}}"\n              },\n              {\n                "column": "measurement_id",\n                "value": "={{$json.measurementId}}"\n              },\n              {\n                "column": "roof_area_sqft",\n                "value": "={{$json.roofArea}}"\n              },\n              {\n                "column": "selected_material",\n                "value": "={{JSON.stringify($json.selectedMaterial)}}"\n              },\n              {\n                "column": "material_costs",\n                "value": "={{JSON.stringify($json.materialCosts)}}"\n              },\n              {\n                "column": "labor_costs",\n                "value": "={{JSON.stringify($json.laborCosts)}}"\n              },\n              {\n                "column": "additional_costs",\n                "value": "={{JSON.stringify($json.additionalCosts)}}"\n              },\n              {\n                "column": "total_cost",\n                "value": "={{$json.totalCost}}"\n              },\n              {\n                "column": "cost_per_sqft",\n                "value": "={{$json.costPerSqft}}"\n              },\n              {\n                "column": "contact_info",\n                "value": "={{JSON.stringify($json.contactInfo)}}"\n              },\n              {\n                "column": "region",\n                "value": "={{$json.region}}"\n              },\n              {\n                "column": "municipality",\n                "value": "={{$json.municipality}}"\n              },\n              {\n                "column": "urgency",\n                "value": "={{$json.urgency}}"\n              },\n              {\n                "column": "validation_result",\n                "value": "={{JSON.stringify($json.validation)}}"\n              },\n              {\n                "column": "valid_until",\n                "value": "={{$json.validUntil}}"\n              },\n              {\n                "column": "status",\n                "value": "generated"\n              }\n            ]\n          }\n        }\n      },\n      "name": "Store Estimate",\n      "type": "n8n-nodes-base.supabase",\n      "typeVersion": 1,\n      "position": [1340, 300],\n      "credentials": {\n        "supabaseApi": {\n          "id": "supabase-credentials",\n          "name": "Alpine Peak Supabase"\n        }\n      },\n      "id": "store-estimate"\n    },\n    {\n      "parameters": {\n        "url": "={{$env.N8N_WEBHOOK_BASE_URL}}/webhook/generate-pdf",\n        "sendHeaders": true,\n        "headerParameters": {\n          "parameters": [\n            {\n              "name": "Content-Type",\n              "value": "application/json"\n            }\n          ]\n        },\n        "sendBody": true,\n        "bodyContentType": "json",\n        "jsonBody": "={\n  \"estimateId\": \"{{$json.estimateId}}\",\n  \"estimateData\": {{JSON.stringify($json)}}\n}"\n      },\n      "name": "Trigger PDF Generation",\n      "type": "n8n-nodes-base.httpRequest",\n      "typeVersion": 4,\n      "position": [1560, 300],\n      "id": "trigger-pdf"\n    },\n    {\n      "parameters": {\n        "respondWith": "json",\n        "responseBody": "={\n  \"success\": true,\n  \"estimateId\": \"{{$json.estimateId}}\",\n  \"estimate\": {\n    \"roofArea\": {{$json.roofArea}},\n    \"selectedMaterial\": {{JSON.stringify($json.selectedMaterial)}},\n    \"totalCost\": {{$json.totalCost}},\n    \"costPerSqft\": {{$json.costPerSqft}},\n    \"validUntil\": \"{{$json.validUntil}}\"\n  },\n  \"breakdown\": {\n    \"materialCosts\": {{JSON.stringify($json.materialCosts)}},\n    \"laborCosts\": {{JSON.stringify($json.laborCosts)}},\n    \"additionalCosts\": {{JSON.stringify($json.additionalCosts)}}\n  },\n  \"validation\": {{JSON.stringify($json.validation)}},\n  \"pdfGeneration\": \"initiated\",\n  \"createdAt\": \"{{$json.createdAt}}\"\n}"\n      },\n      "name": "Return Estimate Response",\n      "type": "n8n-nodes-base.webhook",\n      "typeVersion": 1,\n      "position": [1780, 300],\n      "id": "return-estimate-response"\n    },\n    {\n      "parameters": {\n        "respondWith": "json",\n        "responseBody": "{\n  \"success\": false,\n  \"error\": \"{{$json.error.message}}\",\n  \"code\": \"ESTIMATE_CALCULATION_FAILED\"\n}",\n        "responseCode": 400\n      },\n      "name": "Error Response",\n      "type": "n8n-nodes-base.webhook",\n      "typeVersion": 1,\n      "position": [900, 500],\n      "id": "error-response"\n    }\n  ],\n  "connections": {\n    "Calculate Estimate Webhook": {\n      "main": [\n        [\n          {\n            "node": "Validate Request Data",\n            "type": "main",\n            "index": 0\n          }\n        ]\n      ]\n    },\n    "Validate Request Data": {\n      "main": [\n        [\n          {\n            "node": "Get Material Pricing",\n            "type": "main",\n            "index": 0\n          },\n          {\n            "node": "Get Regional Rates",\n            "type": "main",\n            "index": 0\n          }\n        ]\n      ]\n    },\n    "Get Material Pricing": {\n      "main": [\n        [\n          {\n            "node": "Calculate Detailed Estimate",\n            "type": "main",\n            "index": 0\n          }\n        ]\n      ]\n    },\n    "Get Regional Rates": {\n      "main": [\n        [\n          {\n            "node": "Calculate Detailed Estimate",\n            "type": "main",\n            "index": 0\n          }\n        ]\n      ]\n    },\n    "Calculate Detailed Estimate": {\n      "main": [\n        [\n          {\n            "node": "Validate Estimate",\n            "type": "main",\n            "index": 0\n          }\n        ]\n      ]\n    },\n    "Validate Estimate": {\n      "main": [\n        [\n          {\n            "node": "Store Estimate",\n            "type": "main",\n            "index": 0\n          }\n        ]\n      ]\n    },\n    "Store Estimate": {\n      "main": [\n        [\n          {\n            "node": "Trigger PDF Generation",\n            "type": "main",\n            "index": 0\n          }\n        ]\n      ]\n    },\n    "Trigger PDF Generation": {\n      "main": [\n        [\n          {\n            "node": "Return Estimate Response",\n            "type": "main",\n            "index": 0\n          }\n        ]\n      ]\n    }\n  },\n  "createdAt": "2025-09-07T00:00:00.000Z",\n  "updatedAt": "2025-09-07T00:00:00.000Z",\n  "settings": {},\n  "staticData": null,\n  "pinData": {},\n  "versionId": "estimate-calculator-v1.0",\n  "meta": {\n    "templateCredsSetupCompleted": false\n  }\n}